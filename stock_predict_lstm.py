# -*- coding: utf-8 -*-
"""stock_predict_LSTM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15NIWeZ8I6_9yxbQkgPtuV_jSIE7RcWMs
"""

import pandas as pd
import math
from pandas_datareader import data as pdr
import yfinance as yf
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
plt.style.use('fivethirtyeight')

df = yf.download('VUSA', start='2023-06-01', end='2024-07-25')
# df.reset_index(drop=False, inplace=True)
# df = df.reset_index(drop=True)
df

plt.figure(figsize=(16,8))
plt.plot(df['Close'])
plt.title('Close Price history')
plt.ylabel('Price',fontsize=18)
plt.xlabel('Date',fontsize=18)
plt.show()

df.shape

data = df.filter(['Close'])

dataset = data.values

#Scaling
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

# training data
training_data_len = math.ceil(len(dataset) * 0.8)
train_data = scaled_data[0:training_data_len, :]

test_data = scaled_data[training_data_len-60:  ,:]

#Split
x_train = []
y_train = []
x_test = []
y_test = dataset[training_data_len:, :]

for i in range (60, len(train_data)):
  x_train.append(train_data[i-60:i, 0])
  y_train.append(train_data[i, 0])

for i in range (60, len(test_data)):
  x_test.append(test_data[i-60:i, 0])

# convert to numpy to train LSTM
x_train, y_train = np.array(x_train), np.array(y_train)
x_test, y_test = np.array(x_test), np.array(y_test)

# reshaping data for LSTM to be 3 dimentional (no. sample, no. timestamps, no. features)
x_train = np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))
x_test = np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))

# LSTm model

model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1],1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer='adam',loss='mean_squared_error')

model.fit(x_train, y_train, batch_size=1, epochs=1)

# Get teh model prediction
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

# Evaluation
rmse = np.sqrt(np.mean(predictions - y_test)**2)
rmse

train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions

plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Date',fontsize=18)
plt.ylabel('Close Price',fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close','Predictions']])
plt.legend(['Train','Val', 'Predict'], loc = 'lower right')
plt.show()

valid

apple_quote = yf.download('AAPL', start='2023-06-03', end='2024-07-05')
new_df = apple_quote.filter(['Close'])
# Get the last 60 days closing price
last_60_days = new_df[-60:].values
last_60_days_scaled = scaler.transform(last_60_days)
X_test = []
X_test.append(last_60_days_scaled)
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1],1))

pred_price = model.predict(X_test)

pred_price = scaler.inverse_transform(pred_price)

print(pred_price)

apple_quote

apple_quote2 = yf.download('AAPL', start='2024-07-05', end='2024-07-06')
print(apple_quote2['Close'])